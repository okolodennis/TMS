//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace JenzHealth {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NonTemplatedLabResultDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NonTemplatedLabResultDataSet : global::System.Data.DataSet {
        
        private NonTemplatedLabPreparationsDataTable tableNonTemplatedLabPreparations;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public NonTemplatedLabResultDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected NonTemplatedLabResultDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["NonTemplatedLabPreparations"] != null)) {
                    base.Tables.Add(new NonTemplatedLabPreparationsDataTable(ds.Tables["NonTemplatedLabPreparations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NonTemplatedLabPreparationsDataTable NonTemplatedLabPreparations {
            get {
                return this.tableNonTemplatedLabPreparations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            NonTemplatedLabResultDataSet cln = ((NonTemplatedLabResultDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["NonTemplatedLabPreparations"] != null)) {
                    base.Tables.Add(new NonTemplatedLabPreparationsDataTable(ds.Tables["NonTemplatedLabPreparations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableNonTemplatedLabPreparations = ((NonTemplatedLabPreparationsDataTable)(base.Tables["NonTemplatedLabPreparations"]));
            if ((initTable == true)) {
                if ((this.tableNonTemplatedLabPreparations != null)) {
                    this.tableNonTemplatedLabPreparations.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "NonTemplatedLabResultDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NonTemplatedLabResultDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNonTemplatedLabPreparations = new NonTemplatedLabPreparationsDataTable();
            base.Tables.Add(this.tableNonTemplatedLabPreparations);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeNonTemplatedLabPreparations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NonTemplatedLabResultDataSet ds = new NonTemplatedLabResultDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void NonTemplatedLabPreparationsRowChangeEventHandler(object sender, NonTemplatedLabPreparationsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NonTemplatedLabPreparationsDataTable : global::System.Data.TypedTableBase<NonTemplatedLabPreparationsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnBillInvoiceNumber;
            
            private global::System.Data.DataColumn columnAppearance;
            
            private global::System.Data.DataColumn columnColor;
            
            private global::System.Data.DataColumn columnMacrosopyBlood;
            
            private global::System.Data.DataColumn columnAdultWarm;
            
            private global::System.Data.DataColumn columnMucus;
            
            private global::System.Data.DataColumn columnSpecificGravity;
            
            private global::System.Data.DataColumn columnAcidity;
            
            private global::System.Data.DataColumn columnGlucose;
            
            private global::System.Data.DataColumn columnProtein;
            
            private global::System.Data.DataColumn columnNiterite;
            
            private global::System.Data.DataColumn columnKetones;
            
            private global::System.Data.DataColumn columnBlirubin;
            
            private global::System.Data.DataColumn columnUrobilinogen;
            
            private global::System.Data.DataColumn columnAscorbicAcid;
            
            private global::System.Data.DataColumn columnDipstickBlood;
            
            private global::System.Data.DataColumn columnLeucocyteEsterase;
            
            private global::System.Data.DataColumn columnTemperature;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnAtomsphere;
            
            private global::System.Data.DataColumn columnPlate;
            
            private global::System.Data.DataColumn columnIncubatio;
            
            private global::System.Data.DataColumn columnLabnote;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            private global::System.Data.DataColumn columnMicroscopyType;
            
            private global::System.Data.DataColumn columnStainType;
            
            private global::System.Data.DataColumn columnPusCells;
            
            private global::System.Data.DataColumn columnWhiteBloodCells;
            
            private global::System.Data.DataColumn columnRedBloodCells;
            
            private global::System.Data.DataColumn columnWetMountBacteria;
            
            private global::System.Data.DataColumn columnWetMountYesats;
            
            private global::System.Data.DataColumn columnCasts;
            
            private global::System.Data.DataColumn columnCystals;
            
            private global::System.Data.DataColumn columnOva;
            
            private global::System.Data.DataColumn columnWetMountParasite;
            
            private global::System.Data.DataColumn columnEpithelialCells;
            
            private global::System.Data.DataColumn columnProtozoa;
            
            private global::System.Data.DataColumn columnWetMountOthers;
            
            private global::System.Data.DataColumn columnGramPositiveCocci;
            
            private global::System.Data.DataColumn columnGramPositiveRods;
            
            private global::System.Data.DataColumn columnTrichomonasVaginalis;
            
            private global::System.Data.DataColumn columnYeastCells;
            
            private global::System.Data.DataColumn columnGramNegativeCocci;
            
            private global::System.Data.DataColumn columnGramNegativeRods;
            
            private global::System.Data.DataColumn columnVincetsOrganisms;
            
            private global::System.Data.DataColumn columnGiemsaStainParasite;
            
            private global::System.Data.DataColumn columnGiemsaOthers;
            
            private global::System.Data.DataColumn columnAcisFastBacilli;
            
            private global::System.Data.DataColumn columnZiehlOthers;
            
            private global::System.Data.DataColumn columnIndiaInkResult;
            
            private global::System.Data.DataColumn columnIodineResult;
            
            private global::System.Data.DataColumn columnMethyleneResult;
            
            private global::System.Data.DataColumn columnOthersResult;
            
            private global::System.Data.DataColumn columnDurationOfAbstinence;
            
            private global::System.Data.DataColumn columnDateOfProduction;
            
            private global::System.Data.DataColumn columnTimeRecieved;
            
            private global::System.Data.DataColumn columnTimeOfProduction;
            
            private global::System.Data.DataColumn columnModeOfProduction;
            
            private global::System.Data.DataColumn columnViscosity;
            
            private global::System.Data.DataColumn columnTimeExamined;
            
            private global::System.Data.DataColumn columnMorphology;
            
            private global::System.Data.DataColumn columnMotility;
            
            private global::System.Data.DataColumn columnTotalSpermCount;
            
            private global::System.Data.DataColumn columnImmatureCells;
            
            private global::System.Data.DataColumn columnWBCS;
            
            private global::System.Data.DataColumn columnAnySpillage;
            
            private global::System.Data.DataColumn columnRBCS;
            
            private global::System.Data.DataColumn columnPH;
            
            private global::System.Data.DataColumn columnKOHPrepareation;
            
            private global::System.Data.DataColumn columnKOHResult;
            
            private global::System.Data.DataColumn columnOtherStainResult;
            
            private global::System.Data.DataColumn columnServiceDepartment;
            
            private global::System.Data.DataColumn columnTemplate;
            
            private global::System.Data.DataColumn columnStainTypee;
            
            private global::System.Data.DataColumn columnMicroscopyTypee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsDataTable() {
                this.TableName = "NonTemplatedLabPreparations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal NonTemplatedLabPreparationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected NonTemplatedLabPreparationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn BillInvoiceNumberColumn {
                get {
                    return this.columnBillInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AppearanceColumn {
                get {
                    return this.columnAppearance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MacrosopyBloodColumn {
                get {
                    return this.columnMacrosopyBlood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AdultWarmColumn {
                get {
                    return this.columnAdultWarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MucusColumn {
                get {
                    return this.columnMucus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn SpecificGravityColumn {
                get {
                    return this.columnSpecificGravity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AcidityColumn {
                get {
                    return this.columnAcidity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GlucoseColumn {
                get {
                    return this.columnGlucose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ProteinColumn {
                get {
                    return this.columnProtein;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn NiteriteColumn {
                get {
                    return this.columnNiterite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn KetonesColumn {
                get {
                    return this.columnKetones;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn BlirubinColumn {
                get {
                    return this.columnBlirubin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn UrobilinogenColumn {
                get {
                    return this.columnUrobilinogen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AscorbicAcidColumn {
                get {
                    return this.columnAscorbicAcid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DipstickBloodColumn {
                get {
                    return this.columnDipstickBlood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn LeucocyteEsteraseColumn {
                get {
                    return this.columnLeucocyteEsterase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TemperatureColumn {
                get {
                    return this.columnTemperature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AtomsphereColumn {
                get {
                    return this.columnAtomsphere;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PlateColumn {
                get {
                    return this.columnPlate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IncubatioColumn {
                get {
                    return this.columnIncubatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn LabnoteColumn {
                get {
                    return this.columnLabnote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MicroscopyTypeColumn {
                get {
                    return this.columnMicroscopyType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn StainTypeColumn {
                get {
                    return this.columnStainType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PusCellsColumn {
                get {
                    return this.columnPusCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WhiteBloodCellsColumn {
                get {
                    return this.columnWhiteBloodCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RedBloodCellsColumn {
                get {
                    return this.columnRedBloodCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WetMountBacteriaColumn {
                get {
                    return this.columnWetMountBacteria;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WetMountYesatsColumn {
                get {
                    return this.columnWetMountYesats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CastsColumn {
                get {
                    return this.columnCasts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn CystalsColumn {
                get {
                    return this.columnCystals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn OvaColumn {
                get {
                    return this.columnOva;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WetMountParasiteColumn {
                get {
                    return this.columnWetMountParasite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn EpithelialCellsColumn {
                get {
                    return this.columnEpithelialCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ProtozoaColumn {
                get {
                    return this.columnProtozoa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WetMountOthersColumn {
                get {
                    return this.columnWetMountOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GramPositiveCocciColumn {
                get {
                    return this.columnGramPositiveCocci;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GramPositiveRodsColumn {
                get {
                    return this.columnGramPositiveRods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TrichomonasVaginalisColumn {
                get {
                    return this.columnTrichomonasVaginalis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn YeastCellsColumn {
                get {
                    return this.columnYeastCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GramNegativeCocciColumn {
                get {
                    return this.columnGramNegativeCocci;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GramNegativeRodsColumn {
                get {
                    return this.columnGramNegativeRods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn VincetsOrganismsColumn {
                get {
                    return this.columnVincetsOrganisms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GiemsaStainParasiteColumn {
                get {
                    return this.columnGiemsaStainParasite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn GiemsaOthersColumn {
                get {
                    return this.columnGiemsaOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AcisFastBacilliColumn {
                get {
                    return this.columnAcisFastBacilli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ZiehlOthersColumn {
                get {
                    return this.columnZiehlOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IndiaInkResultColumn {
                get {
                    return this.columnIndiaInkResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn IodineResultColumn {
                get {
                    return this.columnIodineResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MethyleneResultColumn {
                get {
                    return this.columnMethyleneResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn OthersResultColumn {
                get {
                    return this.columnOthersResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DurationOfAbstinenceColumn {
                get {
                    return this.columnDurationOfAbstinence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn DateOfProductionColumn {
                get {
                    return this.columnDateOfProduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TimeRecievedColumn {
                get {
                    return this.columnTimeRecieved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TimeOfProductionColumn {
                get {
                    return this.columnTimeOfProduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ModeOfProductionColumn {
                get {
                    return this.columnModeOfProduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ViscosityColumn {
                get {
                    return this.columnViscosity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TimeExaminedColumn {
                get {
                    return this.columnTimeExamined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MorphologyColumn {
                get {
                    return this.columnMorphology;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MotilityColumn {
                get {
                    return this.columnMotility;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TotalSpermCountColumn {
                get {
                    return this.columnTotalSpermCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ImmatureCellsColumn {
                get {
                    return this.columnImmatureCells;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn WBCSColumn {
                get {
                    return this.columnWBCS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn AnySpillageColumn {
                get {
                    return this.columnAnySpillage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn RBCSColumn {
                get {
                    return this.columnRBCS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn PHColumn {
                get {
                    return this.columnPH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn KOHPrepareationColumn {
                get {
                    return this.columnKOHPrepareation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn KOHResultColumn {
                get {
                    return this.columnKOHResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn OtherStainResultColumn {
                get {
                    return this.columnOtherStainResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ServiceDepartmentColumn {
                get {
                    return this.columnServiceDepartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn TemplateColumn {
                get {
                    return this.columnTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn StainTypeeColumn {
                get {
                    return this.columnStainTypee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn MicroscopyTypeeColumn {
                get {
                    return this.columnMicroscopyTypee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRow this[int index] {
                get {
                    return ((NonTemplatedLabPreparationsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event NonTemplatedLabPreparationsRowChangeEventHandler NonTemplatedLabPreparationsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event NonTemplatedLabPreparationsRowChangeEventHandler NonTemplatedLabPreparationsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event NonTemplatedLabPreparationsRowChangeEventHandler NonTemplatedLabPreparationsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event NonTemplatedLabPreparationsRowChangeEventHandler NonTemplatedLabPreparationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddNonTemplatedLabPreparationsRow(NonTemplatedLabPreparationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRow AddNonTemplatedLabPreparationsRow(
                        string BillInvoiceNumber, 
                        string Appearance, 
                        string Color, 
                        string MacrosopyBlood, 
                        string AdultWarm, 
                        string Mucus, 
                        string SpecificGravity, 
                        string Acidity, 
                        string Glucose, 
                        string Protein, 
                        string Niterite, 
                        string Ketones, 
                        string Blirubin, 
                        string Urobilinogen, 
                        string AscorbicAcid, 
                        string DipstickBlood, 
                        string LeucocyteEsterase, 
                        string Temperature, 
                        string Duration, 
                        string Atomsphere, 
                        string Plate, 
                        string Incubatio, 
                        string Labnote, 
                        bool IsDeleted, 
                        System.DateTime DateCreated, 
                        int MicroscopyType, 
                        int StainType, 
                        string PusCells, 
                        string WhiteBloodCells, 
                        string RedBloodCells, 
                        string WetMountBacteria, 
                        string WetMountYesats, 
                        string Casts, 
                        string Cystals, 
                        string Ova, 
                        string WetMountParasite, 
                        string EpithelialCells, 
                        string Protozoa, 
                        string WetMountOthers, 
                        string GramPositiveCocci, 
                        string GramPositiveRods, 
                        string TrichomonasVaginalis, 
                        string YeastCells, 
                        string GramNegativeCocci, 
                        string GramNegativeRods, 
                        string VincetsOrganisms, 
                        string GiemsaStainParasite, 
                        string GiemsaOthers, 
                        string AcisFastBacilli, 
                        string ZiehlOthers, 
                        string IndiaInkResult, 
                        string IodineResult, 
                        string MethyleneResult, 
                        string OthersResult, 
                        string DurationOfAbstinence, 
                        System.DateTime DateOfProduction, 
                        System.DateTime TimeRecieved, 
                        System.DateTime TimeOfProduction, 
                        string ModeOfProduction, 
                        string Viscosity, 
                        System.DateTime TimeExamined, 
                        string Morphology, 
                        string Motility, 
                        int TotalSpermCount, 
                        string ImmatureCells, 
                        string WBCS, 
                        string AnySpillage, 
                        string RBCS, 
                        string PH, 
                        string KOHPrepareation, 
                        string KOHResult, 
                        string OtherStainResult, 
                        string ServiceDepartment, 
                        string Template, 
                        string StainTypee, 
                        string MicroscopyTypee) {
                NonTemplatedLabPreparationsRow rowNonTemplatedLabPreparationsRow = ((NonTemplatedLabPreparationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BillInvoiceNumber,
                        Appearance,
                        Color,
                        MacrosopyBlood,
                        AdultWarm,
                        Mucus,
                        SpecificGravity,
                        Acidity,
                        Glucose,
                        Protein,
                        Niterite,
                        Ketones,
                        Blirubin,
                        Urobilinogen,
                        AscorbicAcid,
                        DipstickBlood,
                        LeucocyteEsterase,
                        Temperature,
                        Duration,
                        Atomsphere,
                        Plate,
                        Incubatio,
                        Labnote,
                        IsDeleted,
                        DateCreated,
                        MicroscopyType,
                        StainType,
                        PusCells,
                        WhiteBloodCells,
                        RedBloodCells,
                        WetMountBacteria,
                        WetMountYesats,
                        Casts,
                        Cystals,
                        Ova,
                        WetMountParasite,
                        EpithelialCells,
                        Protozoa,
                        WetMountOthers,
                        GramPositiveCocci,
                        GramPositiveRods,
                        TrichomonasVaginalis,
                        YeastCells,
                        GramNegativeCocci,
                        GramNegativeRods,
                        VincetsOrganisms,
                        GiemsaStainParasite,
                        GiemsaOthers,
                        AcisFastBacilli,
                        ZiehlOthers,
                        IndiaInkResult,
                        IodineResult,
                        MethyleneResult,
                        OthersResult,
                        DurationOfAbstinence,
                        DateOfProduction,
                        TimeRecieved,
                        TimeOfProduction,
                        ModeOfProduction,
                        Viscosity,
                        TimeExamined,
                        Morphology,
                        Motility,
                        TotalSpermCount,
                        ImmatureCells,
                        WBCS,
                        AnySpillage,
                        RBCS,
                        PH,
                        KOHPrepareation,
                        KOHResult,
                        OtherStainResult,
                        ServiceDepartment,
                        Template,
                        StainTypee,
                        MicroscopyTypee};
                rowNonTemplatedLabPreparationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNonTemplatedLabPreparationsRow);
                return rowNonTemplatedLabPreparationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRow FindById(int Id) {
                return ((NonTemplatedLabPreparationsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NonTemplatedLabPreparationsDataTable cln = ((NonTemplatedLabPreparationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NonTemplatedLabPreparationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnBillInvoiceNumber = base.Columns["BillInvoiceNumber"];
                this.columnAppearance = base.Columns["Appearance"];
                this.columnColor = base.Columns["Color"];
                this.columnMacrosopyBlood = base.Columns["MacrosopyBlood"];
                this.columnAdultWarm = base.Columns["AdultWarm"];
                this.columnMucus = base.Columns["Mucus"];
                this.columnSpecificGravity = base.Columns["SpecificGravity"];
                this.columnAcidity = base.Columns["Acidity"];
                this.columnGlucose = base.Columns["Glucose"];
                this.columnProtein = base.Columns["Protein"];
                this.columnNiterite = base.Columns["Niterite"];
                this.columnKetones = base.Columns["Ketones"];
                this.columnBlirubin = base.Columns["Blirubin"];
                this.columnUrobilinogen = base.Columns["Urobilinogen"];
                this.columnAscorbicAcid = base.Columns["AscorbicAcid"];
                this.columnDipstickBlood = base.Columns["DipstickBlood"];
                this.columnLeucocyteEsterase = base.Columns["LeucocyteEsterase"];
                this.columnTemperature = base.Columns["Temperature"];
                this.columnDuration = base.Columns["Duration"];
                this.columnAtomsphere = base.Columns["Atomsphere"];
                this.columnPlate = base.Columns["Plate"];
                this.columnIncubatio = base.Columns["Incubatio"];
                this.columnLabnote = base.Columns["Labnote"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnDateCreated = base.Columns["DateCreated"];
                this.columnMicroscopyType = base.Columns["MicroscopyType"];
                this.columnStainType = base.Columns["StainType"];
                this.columnPusCells = base.Columns["PusCells"];
                this.columnWhiteBloodCells = base.Columns["WhiteBloodCells"];
                this.columnRedBloodCells = base.Columns["RedBloodCells"];
                this.columnWetMountBacteria = base.Columns["WetMountBacteria"];
                this.columnWetMountYesats = base.Columns["WetMountYesats"];
                this.columnCasts = base.Columns["Casts"];
                this.columnCystals = base.Columns["Cystals"];
                this.columnOva = base.Columns["Ova"];
                this.columnWetMountParasite = base.Columns["WetMountParasite"];
                this.columnEpithelialCells = base.Columns["EpithelialCells"];
                this.columnProtozoa = base.Columns["Protozoa"];
                this.columnWetMountOthers = base.Columns["WetMountOthers"];
                this.columnGramPositiveCocci = base.Columns["GramPositiveCocci"];
                this.columnGramPositiveRods = base.Columns["GramPositiveRods"];
                this.columnTrichomonasVaginalis = base.Columns["TrichomonasVaginalis"];
                this.columnYeastCells = base.Columns["YeastCells"];
                this.columnGramNegativeCocci = base.Columns["GramNegativeCocci"];
                this.columnGramNegativeRods = base.Columns["GramNegativeRods"];
                this.columnVincetsOrganisms = base.Columns["VincetsOrganisms"];
                this.columnGiemsaStainParasite = base.Columns["GiemsaStainParasite"];
                this.columnGiemsaOthers = base.Columns["GiemsaOthers"];
                this.columnAcisFastBacilli = base.Columns["AcisFastBacilli"];
                this.columnZiehlOthers = base.Columns["ZiehlOthers"];
                this.columnIndiaInkResult = base.Columns["IndiaInkResult"];
                this.columnIodineResult = base.Columns["IodineResult"];
                this.columnMethyleneResult = base.Columns["MethyleneResult"];
                this.columnOthersResult = base.Columns["OthersResult"];
                this.columnDurationOfAbstinence = base.Columns["DurationOfAbstinence"];
                this.columnDateOfProduction = base.Columns["DateOfProduction"];
                this.columnTimeRecieved = base.Columns["TimeRecieved"];
                this.columnTimeOfProduction = base.Columns["TimeOfProduction"];
                this.columnModeOfProduction = base.Columns["ModeOfProduction"];
                this.columnViscosity = base.Columns["Viscosity"];
                this.columnTimeExamined = base.Columns["TimeExamined"];
                this.columnMorphology = base.Columns["Morphology"];
                this.columnMotility = base.Columns["Motility"];
                this.columnTotalSpermCount = base.Columns["TotalSpermCount"];
                this.columnImmatureCells = base.Columns["ImmatureCells"];
                this.columnWBCS = base.Columns["WBCS"];
                this.columnAnySpillage = base.Columns["AnySpillage"];
                this.columnRBCS = base.Columns["RBCS"];
                this.columnPH = base.Columns["PH"];
                this.columnKOHPrepareation = base.Columns["KOHPrepareation"];
                this.columnKOHResult = base.Columns["KOHResult"];
                this.columnOtherStainResult = base.Columns["OtherStainResult"];
                this.columnServiceDepartment = base.Columns["ServiceDepartment"];
                this.columnTemplate = base.Columns["Template"];
                this.columnStainTypee = base.Columns["StainTypee"];
                this.columnMicroscopyTypee = base.Columns["MicroscopyTypee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnBillInvoiceNumber = new global::System.Data.DataColumn("BillInvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillInvoiceNumber);
                this.columnAppearance = new global::System.Data.DataColumn("Appearance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppearance);
                this.columnColor = new global::System.Data.DataColumn("Color", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnMacrosopyBlood = new global::System.Data.DataColumn("MacrosopyBlood", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMacrosopyBlood);
                this.columnAdultWarm = new global::System.Data.DataColumn("AdultWarm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdultWarm);
                this.columnMucus = new global::System.Data.DataColumn("Mucus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMucus);
                this.columnSpecificGravity = new global::System.Data.DataColumn("SpecificGravity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecificGravity);
                this.columnAcidity = new global::System.Data.DataColumn("Acidity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcidity);
                this.columnGlucose = new global::System.Data.DataColumn("Glucose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGlucose);
                this.columnProtein = new global::System.Data.DataColumn("Protein", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProtein);
                this.columnNiterite = new global::System.Data.DataColumn("Niterite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNiterite);
                this.columnKetones = new global::System.Data.DataColumn("Ketones", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKetones);
                this.columnBlirubin = new global::System.Data.DataColumn("Blirubin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlirubin);
                this.columnUrobilinogen = new global::System.Data.DataColumn("Urobilinogen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrobilinogen);
                this.columnAscorbicAcid = new global::System.Data.DataColumn("AscorbicAcid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAscorbicAcid);
                this.columnDipstickBlood = new global::System.Data.DataColumn("DipstickBlood", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDipstickBlood);
                this.columnLeucocyteEsterase = new global::System.Data.DataColumn("LeucocyteEsterase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeucocyteEsterase);
                this.columnTemperature = new global::System.Data.DataColumn("Temperature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemperature);
                this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuration);
                this.columnAtomsphere = new global::System.Data.DataColumn("Atomsphere", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAtomsphere);
                this.columnPlate = new global::System.Data.DataColumn("Plate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlate);
                this.columnIncubatio = new global::System.Data.DataColumn("Incubatio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncubatio);
                this.columnLabnote = new global::System.Data.DataColumn("Labnote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabnote);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.columnMicroscopyType = new global::System.Data.DataColumn("MicroscopyType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicroscopyType);
                this.columnStainType = new global::System.Data.DataColumn("StainType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStainType);
                this.columnPusCells = new global::System.Data.DataColumn("PusCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPusCells);
                this.columnWhiteBloodCells = new global::System.Data.DataColumn("WhiteBloodCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWhiteBloodCells);
                this.columnRedBloodCells = new global::System.Data.DataColumn("RedBloodCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRedBloodCells);
                this.columnWetMountBacteria = new global::System.Data.DataColumn("WetMountBacteria", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetMountBacteria);
                this.columnWetMountYesats = new global::System.Data.DataColumn("WetMountYesats", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetMountYesats);
                this.columnCasts = new global::System.Data.DataColumn("Casts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCasts);
                this.columnCystals = new global::System.Data.DataColumn("Cystals", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCystals);
                this.columnOva = new global::System.Data.DataColumn("Ova", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOva);
                this.columnWetMountParasite = new global::System.Data.DataColumn("WetMountParasite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetMountParasite);
                this.columnEpithelialCells = new global::System.Data.DataColumn("EpithelialCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEpithelialCells);
                this.columnProtozoa = new global::System.Data.DataColumn("Protozoa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProtozoa);
                this.columnWetMountOthers = new global::System.Data.DataColumn("WetMountOthers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetMountOthers);
                this.columnGramPositiveCocci = new global::System.Data.DataColumn("GramPositiveCocci", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGramPositiveCocci);
                this.columnGramPositiveRods = new global::System.Data.DataColumn("GramPositiveRods", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGramPositiveRods);
                this.columnTrichomonasVaginalis = new global::System.Data.DataColumn("TrichomonasVaginalis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrichomonasVaginalis);
                this.columnYeastCells = new global::System.Data.DataColumn("YeastCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYeastCells);
                this.columnGramNegativeCocci = new global::System.Data.DataColumn("GramNegativeCocci", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGramNegativeCocci);
                this.columnGramNegativeRods = new global::System.Data.DataColumn("GramNegativeRods", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGramNegativeRods);
                this.columnVincetsOrganisms = new global::System.Data.DataColumn("VincetsOrganisms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVincetsOrganisms);
                this.columnGiemsaStainParasite = new global::System.Data.DataColumn("GiemsaStainParasite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiemsaStainParasite);
                this.columnGiemsaOthers = new global::System.Data.DataColumn("GiemsaOthers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiemsaOthers);
                this.columnAcisFastBacilli = new global::System.Data.DataColumn("AcisFastBacilli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcisFastBacilli);
                this.columnZiehlOthers = new global::System.Data.DataColumn("ZiehlOthers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZiehlOthers);
                this.columnIndiaInkResult = new global::System.Data.DataColumn("IndiaInkResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndiaInkResult);
                this.columnIodineResult = new global::System.Data.DataColumn("IodineResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIodineResult);
                this.columnMethyleneResult = new global::System.Data.DataColumn("MethyleneResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMethyleneResult);
                this.columnOthersResult = new global::System.Data.DataColumn("OthersResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthersResult);
                this.columnDurationOfAbstinence = new global::System.Data.DataColumn("DurationOfAbstinence", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationOfAbstinence);
                this.columnDateOfProduction = new global::System.Data.DataColumn("DateOfProduction", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfProduction);
                this.columnTimeRecieved = new global::System.Data.DataColumn("TimeRecieved", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeRecieved);
                this.columnTimeOfProduction = new global::System.Data.DataColumn("TimeOfProduction", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOfProduction);
                this.columnModeOfProduction = new global::System.Data.DataColumn("ModeOfProduction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModeOfProduction);
                this.columnViscosity = new global::System.Data.DataColumn("Viscosity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViscosity);
                this.columnTimeExamined = new global::System.Data.DataColumn("TimeExamined", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeExamined);
                this.columnMorphology = new global::System.Data.DataColumn("Morphology", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMorphology);
                this.columnMotility = new global::System.Data.DataColumn("Motility", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotility);
                this.columnTotalSpermCount = new global::System.Data.DataColumn("TotalSpermCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSpermCount);
                this.columnImmatureCells = new global::System.Data.DataColumn("ImmatureCells", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImmatureCells);
                this.columnWBCS = new global::System.Data.DataColumn("WBCS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWBCS);
                this.columnAnySpillage = new global::System.Data.DataColumn("AnySpillage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnySpillage);
                this.columnRBCS = new global::System.Data.DataColumn("RBCS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRBCS);
                this.columnPH = new global::System.Data.DataColumn("PH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPH);
                this.columnKOHPrepareation = new global::System.Data.DataColumn("KOHPrepareation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKOHPrepareation);
                this.columnKOHResult = new global::System.Data.DataColumn("KOHResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKOHResult);
                this.columnOtherStainResult = new global::System.Data.DataColumn("OtherStainResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherStainResult);
                this.columnServiceDepartment = new global::System.Data.DataColumn("ServiceDepartment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDepartment);
                this.columnTemplate = new global::System.Data.DataColumn("Template", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplate);
                this.columnStainTypee = new global::System.Data.DataColumn("StainTypee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStainTypee);
                this.columnMicroscopyTypee = new global::System.Data.DataColumn("MicroscopyTypee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicroscopyTypee);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnBillInvoiceNumber.MaxLength = 2147483647;
                this.columnAppearance.MaxLength = 2147483647;
                this.columnColor.MaxLength = 2147483647;
                this.columnMacrosopyBlood.MaxLength = 2147483647;
                this.columnAdultWarm.MaxLength = 2147483647;
                this.columnMucus.MaxLength = 2147483647;
                this.columnSpecificGravity.MaxLength = 2147483647;
                this.columnAcidity.MaxLength = 2147483647;
                this.columnGlucose.MaxLength = 2147483647;
                this.columnProtein.MaxLength = 2147483647;
                this.columnNiterite.MaxLength = 2147483647;
                this.columnKetones.MaxLength = 2147483647;
                this.columnBlirubin.MaxLength = 2147483647;
                this.columnUrobilinogen.MaxLength = 2147483647;
                this.columnAscorbicAcid.MaxLength = 2147483647;
                this.columnDipstickBlood.MaxLength = 2147483647;
                this.columnLeucocyteEsterase.MaxLength = 2147483647;
                this.columnTemperature.MaxLength = 2147483647;
                this.columnDuration.MaxLength = 2147483647;
                this.columnAtomsphere.MaxLength = 2147483647;
                this.columnPlate.MaxLength = 2147483647;
                this.columnIncubatio.MaxLength = 2147483647;
                this.columnLabnote.MaxLength = 2147483647;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnDateCreated.AllowDBNull = false;
                this.columnMicroscopyType.AllowDBNull = false;
                this.columnStainType.AllowDBNull = false;
                this.columnPusCells.MaxLength = 2147483647;
                this.columnWhiteBloodCells.MaxLength = 2147483647;
                this.columnRedBloodCells.MaxLength = 2147483647;
                this.columnWetMountBacteria.MaxLength = 2147483647;
                this.columnWetMountYesats.MaxLength = 2147483647;
                this.columnCasts.MaxLength = 2147483647;
                this.columnCystals.MaxLength = 2147483647;
                this.columnOva.MaxLength = 2147483647;
                this.columnWetMountParasite.MaxLength = 2147483647;
                this.columnEpithelialCells.MaxLength = 2147483647;
                this.columnProtozoa.MaxLength = 2147483647;
                this.columnWetMountOthers.MaxLength = 2147483647;
                this.columnGramPositiveCocci.MaxLength = 2147483647;
                this.columnGramPositiveRods.MaxLength = 2147483647;
                this.columnTrichomonasVaginalis.MaxLength = 2147483647;
                this.columnYeastCells.MaxLength = 2147483647;
                this.columnGramNegativeCocci.MaxLength = 2147483647;
                this.columnGramNegativeRods.MaxLength = 2147483647;
                this.columnVincetsOrganisms.MaxLength = 2147483647;
                this.columnGiemsaStainParasite.MaxLength = 2147483647;
                this.columnGiemsaOthers.MaxLength = 2147483647;
                this.columnAcisFastBacilli.MaxLength = 2147483647;
                this.columnZiehlOthers.MaxLength = 2147483647;
                this.columnIndiaInkResult.MaxLength = 2147483647;
                this.columnIodineResult.MaxLength = 2147483647;
                this.columnMethyleneResult.MaxLength = 2147483647;
                this.columnOthersResult.MaxLength = 2147483647;
                this.columnDurationOfAbstinence.MaxLength = 2147483647;
                this.columnModeOfProduction.MaxLength = 2147483647;
                this.columnViscosity.MaxLength = 2147483647;
                this.columnMorphology.MaxLength = 2147483647;
                this.columnMotility.MaxLength = 2147483647;
                this.columnImmatureCells.MaxLength = 2147483647;
                this.columnWBCS.MaxLength = 2147483647;
                this.columnAnySpillage.MaxLength = 2147483647;
                this.columnRBCS.MaxLength = 2147483647;
                this.columnPH.MaxLength = 2147483647;
                this.columnKOHPrepareation.MaxLength = 2147483647;
                this.columnKOHResult.MaxLength = 2147483647;
                this.columnOtherStainResult.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRow NewNonTemplatedLabPreparationsRow() {
                return ((NonTemplatedLabPreparationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NonTemplatedLabPreparationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NonTemplatedLabPreparationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NonTemplatedLabPreparationsRowChanged != null)) {
                    this.NonTemplatedLabPreparationsRowChanged(this, new NonTemplatedLabPreparationsRowChangeEvent(((NonTemplatedLabPreparationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NonTemplatedLabPreparationsRowChanging != null)) {
                    this.NonTemplatedLabPreparationsRowChanging(this, new NonTemplatedLabPreparationsRowChangeEvent(((NonTemplatedLabPreparationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NonTemplatedLabPreparationsRowDeleted != null)) {
                    this.NonTemplatedLabPreparationsRowDeleted(this, new NonTemplatedLabPreparationsRowChangeEvent(((NonTemplatedLabPreparationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NonTemplatedLabPreparationsRowDeleting != null)) {
                    this.NonTemplatedLabPreparationsRowDeleting(this, new NonTemplatedLabPreparationsRowChangeEvent(((NonTemplatedLabPreparationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveNonTemplatedLabPreparationsRow(NonTemplatedLabPreparationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NonTemplatedLabResultDataSet ds = new NonTemplatedLabResultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NonTemplatedLabPreparationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NonTemplatedLabPreparationsRow : global::System.Data.DataRow {
            
            private NonTemplatedLabPreparationsDataTable tableNonTemplatedLabPreparations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal NonTemplatedLabPreparationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNonTemplatedLabPreparations = ((NonTemplatedLabPreparationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Id {
                get {
                    return ((int)(this[this.tableNonTemplatedLabPreparations.IdColumn]));
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string BillInvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.BillInvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillInvoiceNumber\' in table \'NonTemplatedLabPreparations\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.BillInvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Appearance {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AppearanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Appearance\' in table \'NonTemplatedLabPreparations\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AppearanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Color {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Color\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string MacrosopyBlood {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MacrosopyBloodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MacrosopyBlood\' in table \'NonTemplatedLabPreparations\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MacrosopyBloodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string AdultWarm {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AdultWarmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdultWarm\' in table \'NonTemplatedLabPreparations\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AdultWarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Mucus {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MucusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mucus\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MucusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string SpecificGravity {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.SpecificGravityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecificGravity\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.SpecificGravityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Acidity {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AcidityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acidity\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AcidityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Glucose {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GlucoseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Glucose\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GlucoseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Protein {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ProteinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Protein\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ProteinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Niterite {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.NiteriteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Niterite\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.NiteriteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Ketones {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.KetonesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ketones\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.KetonesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Blirubin {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.BlirubinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Blirubin\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.BlirubinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Urobilinogen {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.UrobilinogenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Urobilinogen\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.UrobilinogenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string AscorbicAcid {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AscorbicAcidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AscorbicAcid\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AscorbicAcidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DipstickBlood {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.DipstickBloodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DipstickBlood\' in table \'NonTemplatedLabPreparations\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.DipstickBloodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string LeucocyteEsterase {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.LeucocyteEsteraseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeucocyteEsterase\' in table \'NonTemplatedLabPreparations\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.LeucocyteEsteraseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Temperature {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.TemperatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temperature\' in table \'NonTemplatedLabPreparations\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TemperatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Duration {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.DurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Duration\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Atomsphere {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AtomsphereColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Atomsphere\' in table \'NonTemplatedLabPreparations\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AtomsphereColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Plate {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.PlateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Plate\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.PlateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Incubatio {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.IncubatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Incubatio\' in table \'NonTemplatedLabPreparations\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.IncubatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Labnote {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.LabnoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labnote\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.LabnoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDeleted {
                get {
                    return ((bool)(this[this.tableNonTemplatedLabPreparations.IsDeletedColumn]));
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime DateCreated {
                get {
                    return ((global::System.DateTime)(this[this.tableNonTemplatedLabPreparations.DateCreatedColumn]));
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int MicroscopyType {
                get {
                    return ((int)(this[this.tableNonTemplatedLabPreparations.MicroscopyTypeColumn]));
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MicroscopyTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int StainType {
                get {
                    return ((int)(this[this.tableNonTemplatedLabPreparations.StainTypeColumn]));
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.StainTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string PusCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.PusCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PusCells\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.PusCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WhiteBloodCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WhiteBloodCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WhiteBloodCells\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WhiteBloodCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string RedBloodCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.RedBloodCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RedBloodCells\' in table \'NonTemplatedLabPreparations\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.RedBloodCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WetMountBacteria {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WetMountBacteriaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetMountBacteria\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WetMountBacteriaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WetMountYesats {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WetMountYesatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetMountYesats\' in table \'NonTemplatedLabPreparations\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WetMountYesatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Casts {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.CastsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Casts\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.CastsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Cystals {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.CystalsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cystals\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.CystalsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Ova {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.OvaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ova\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.OvaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WetMountParasite {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WetMountParasiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetMountParasite\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WetMountParasiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string EpithelialCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.EpithelialCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EpithelialCells\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.EpithelialCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Protozoa {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ProtozoaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Protozoa\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ProtozoaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WetMountOthers {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WetMountOthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetMountOthers\' in table \'NonTemplatedLabPreparations\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WetMountOthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GramPositiveCocci {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GramPositiveCocciColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GramPositiveCocci\' in table \'NonTemplatedLabPreparations\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GramPositiveCocciColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GramPositiveRods {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GramPositiveRodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GramPositiveRods\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GramPositiveRodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string TrichomonasVaginalis {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.TrichomonasVaginalisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrichomonasVaginalis\' in table \'NonTemplatedLabPreparations" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TrichomonasVaginalisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string YeastCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.YeastCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YeastCells\' in table \'NonTemplatedLabPreparations\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.YeastCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GramNegativeCocci {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GramNegativeCocciColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GramNegativeCocci\' in table \'NonTemplatedLabPreparations\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GramNegativeCocciColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GramNegativeRods {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GramNegativeRodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GramNegativeRods\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GramNegativeRodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string VincetsOrganisms {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.VincetsOrganismsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VincetsOrganisms\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.VincetsOrganismsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GiemsaStainParasite {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GiemsaStainParasiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiemsaStainParasite\' in table \'NonTemplatedLabPreparations\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GiemsaStainParasiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string GiemsaOthers {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.GiemsaOthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiemsaOthers\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.GiemsaOthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string AcisFastBacilli {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AcisFastBacilliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcisFastBacilli\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AcisFastBacilliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ZiehlOthers {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ZiehlOthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZiehlOthers\' in table \'NonTemplatedLabPreparations\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ZiehlOthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string IndiaInkResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.IndiaInkResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndiaInkResult\' in table \'NonTemplatedLabPreparations\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.IndiaInkResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string IodineResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.IodineResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IodineResult\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.IodineResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string MethyleneResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MethyleneResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MethyleneResult\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MethyleneResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string OthersResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.OthersResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OthersResult\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.OthersResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string DurationOfAbstinence {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.DurationOfAbstinenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DurationOfAbstinence\' in table \'NonTemplatedLabPreparations" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.DurationOfAbstinenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime DateOfProduction {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNonTemplatedLabPreparations.DateOfProductionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfProduction\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.DateOfProductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime TimeRecieved {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNonTemplatedLabPreparations.TimeRecievedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeRecieved\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TimeRecievedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime TimeOfProduction {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNonTemplatedLabPreparations.TimeOfProductionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOfProduction\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TimeOfProductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ModeOfProduction {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ModeOfProductionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModeOfProduction\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ModeOfProductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Viscosity {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ViscosityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Viscosity\' in table \'NonTemplatedLabPreparations\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ViscosityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime TimeExamined {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNonTemplatedLabPreparations.TimeExaminedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeExamined\' in table \'NonTemplatedLabPreparations\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TimeExaminedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Morphology {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MorphologyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Morphology\' in table \'NonTemplatedLabPreparations\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MorphologyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Motility {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MotilityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Motility\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MotilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int TotalSpermCount {
                get {
                    try {
                        return ((int)(this[this.tableNonTemplatedLabPreparations.TotalSpermCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSpermCount\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TotalSpermCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ImmatureCells {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ImmatureCellsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImmatureCells\' in table \'NonTemplatedLabPreparations\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ImmatureCellsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string WBCS {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.WBCSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WBCS\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.WBCSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string AnySpillage {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.AnySpillageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnySpillage\' in table \'NonTemplatedLabPreparations\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.AnySpillageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string RBCS {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.RBCSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RBCS\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.RBCSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string PH {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.PHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PH\' in table \'NonTemplatedLabPreparations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.PHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string KOHPrepareation {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.KOHPrepareationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KOHPrepareation\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.KOHPrepareationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string KOHResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.KOHResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KOHResult\' in table \'NonTemplatedLabPreparations\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.KOHResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string OtherStainResult {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.OtherStainResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherStainResult\' in table \'NonTemplatedLabPreparations\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.OtherStainResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string ServiceDepartment {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.ServiceDepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDepartment\' in table \'NonTemplatedLabPreparations\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.ServiceDepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Template {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.TemplateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Template\' in table \'NonTemplatedLabPreparations\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.TemplateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string StainTypee {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.StainTypeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StainTypee\' in table \'NonTemplatedLabPreparations\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.StainTypeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string MicroscopyTypee {
                get {
                    try {
                        return ((string)(this[this.tableNonTemplatedLabPreparations.MicroscopyTypeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MicroscopyTypee\' in table \'NonTemplatedLabPreparations\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonTemplatedLabPreparations.MicroscopyTypeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsBillInvoiceNumberNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.BillInvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetBillInvoiceNumberNull() {
                this[this.tableNonTemplatedLabPreparations.BillInvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAppearanceNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AppearanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAppearanceNull() {
                this[this.tableNonTemplatedLabPreparations.AppearanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsColorNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetColorNull() {
                this[this.tableNonTemplatedLabPreparations.ColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMacrosopyBloodNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MacrosopyBloodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMacrosopyBloodNull() {
                this[this.tableNonTemplatedLabPreparations.MacrosopyBloodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAdultWarmNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AdultWarmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAdultWarmNull() {
                this[this.tableNonTemplatedLabPreparations.AdultWarmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMucusNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MucusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMucusNull() {
                this[this.tableNonTemplatedLabPreparations.MucusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsSpecificGravityNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.SpecificGravityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetSpecificGravityNull() {
                this[this.tableNonTemplatedLabPreparations.SpecificGravityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAcidityNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AcidityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAcidityNull() {
                this[this.tableNonTemplatedLabPreparations.AcidityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGlucoseNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GlucoseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGlucoseNull() {
                this[this.tableNonTemplatedLabPreparations.GlucoseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProteinNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ProteinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProteinNull() {
                this[this.tableNonTemplatedLabPreparations.ProteinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsNiteriteNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.NiteriteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetNiteriteNull() {
                this[this.tableNonTemplatedLabPreparations.NiteriteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsKetonesNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.KetonesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetKetonesNull() {
                this[this.tableNonTemplatedLabPreparations.KetonesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsBlirubinNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.BlirubinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetBlirubinNull() {
                this[this.tableNonTemplatedLabPreparations.BlirubinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsUrobilinogenNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.UrobilinogenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetUrobilinogenNull() {
                this[this.tableNonTemplatedLabPreparations.UrobilinogenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAscorbicAcidNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AscorbicAcidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAscorbicAcidNull() {
                this[this.tableNonTemplatedLabPreparations.AscorbicAcidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDipstickBloodNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.DipstickBloodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDipstickBloodNull() {
                this[this.tableNonTemplatedLabPreparations.DipstickBloodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsLeucocyteEsteraseNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.LeucocyteEsteraseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetLeucocyteEsteraseNull() {
                this[this.tableNonTemplatedLabPreparations.LeucocyteEsteraseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTemperatureNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TemperatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTemperatureNull() {
                this[this.tableNonTemplatedLabPreparations.TemperatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDurationNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.DurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDurationNull() {
                this[this.tableNonTemplatedLabPreparations.DurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAtomsphereNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AtomsphereColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAtomsphereNull() {
                this[this.tableNonTemplatedLabPreparations.AtomsphereColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsPlateNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.PlateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetPlateNull() {
                this[this.tableNonTemplatedLabPreparations.PlateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIncubatioNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.IncubatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIncubatioNull() {
                this[this.tableNonTemplatedLabPreparations.IncubatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsLabnoteNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.LabnoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetLabnoteNull() {
                this[this.tableNonTemplatedLabPreparations.LabnoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsPusCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.PusCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetPusCellsNull() {
                this[this.tableNonTemplatedLabPreparations.PusCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWhiteBloodCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WhiteBloodCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWhiteBloodCellsNull() {
                this[this.tableNonTemplatedLabPreparations.WhiteBloodCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRedBloodCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.RedBloodCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRedBloodCellsNull() {
                this[this.tableNonTemplatedLabPreparations.RedBloodCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWetMountBacteriaNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WetMountBacteriaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWetMountBacteriaNull() {
                this[this.tableNonTemplatedLabPreparations.WetMountBacteriaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWetMountYesatsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WetMountYesatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWetMountYesatsNull() {
                this[this.tableNonTemplatedLabPreparations.WetMountYesatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCastsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.CastsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCastsNull() {
                this[this.tableNonTemplatedLabPreparations.CastsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsCystalsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.CystalsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetCystalsNull() {
                this[this.tableNonTemplatedLabPreparations.CystalsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsOvaNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.OvaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetOvaNull() {
                this[this.tableNonTemplatedLabPreparations.OvaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWetMountParasiteNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WetMountParasiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWetMountParasiteNull() {
                this[this.tableNonTemplatedLabPreparations.WetMountParasiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsEpithelialCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.EpithelialCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetEpithelialCellsNull() {
                this[this.tableNonTemplatedLabPreparations.EpithelialCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsProtozoaNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ProtozoaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetProtozoaNull() {
                this[this.tableNonTemplatedLabPreparations.ProtozoaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWetMountOthersNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WetMountOthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWetMountOthersNull() {
                this[this.tableNonTemplatedLabPreparations.WetMountOthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGramPositiveCocciNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GramPositiveCocciColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGramPositiveCocciNull() {
                this[this.tableNonTemplatedLabPreparations.GramPositiveCocciColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGramPositiveRodsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GramPositiveRodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGramPositiveRodsNull() {
                this[this.tableNonTemplatedLabPreparations.GramPositiveRodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTrichomonasVaginalisNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TrichomonasVaginalisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTrichomonasVaginalisNull() {
                this[this.tableNonTemplatedLabPreparations.TrichomonasVaginalisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsYeastCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.YeastCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetYeastCellsNull() {
                this[this.tableNonTemplatedLabPreparations.YeastCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGramNegativeCocciNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GramNegativeCocciColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGramNegativeCocciNull() {
                this[this.tableNonTemplatedLabPreparations.GramNegativeCocciColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGramNegativeRodsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GramNegativeRodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGramNegativeRodsNull() {
                this[this.tableNonTemplatedLabPreparations.GramNegativeRodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsVincetsOrganismsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.VincetsOrganismsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetVincetsOrganismsNull() {
                this[this.tableNonTemplatedLabPreparations.VincetsOrganismsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGiemsaStainParasiteNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GiemsaStainParasiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGiemsaStainParasiteNull() {
                this[this.tableNonTemplatedLabPreparations.GiemsaStainParasiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsGiemsaOthersNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.GiemsaOthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetGiemsaOthersNull() {
                this[this.tableNonTemplatedLabPreparations.GiemsaOthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAcisFastBacilliNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AcisFastBacilliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAcisFastBacilliNull() {
                this[this.tableNonTemplatedLabPreparations.AcisFastBacilliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsZiehlOthersNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ZiehlOthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetZiehlOthersNull() {
                this[this.tableNonTemplatedLabPreparations.ZiehlOthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIndiaInkResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.IndiaInkResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIndiaInkResultNull() {
                this[this.tableNonTemplatedLabPreparations.IndiaInkResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsIodineResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.IodineResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetIodineResultNull() {
                this[this.tableNonTemplatedLabPreparations.IodineResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMethyleneResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MethyleneResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMethyleneResultNull() {
                this[this.tableNonTemplatedLabPreparations.MethyleneResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsOthersResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.OthersResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetOthersResultNull() {
                this[this.tableNonTemplatedLabPreparations.OthersResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDurationOfAbstinenceNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.DurationOfAbstinenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDurationOfAbstinenceNull() {
                this[this.tableNonTemplatedLabPreparations.DurationOfAbstinenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsDateOfProductionNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.DateOfProductionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetDateOfProductionNull() {
                this[this.tableNonTemplatedLabPreparations.DateOfProductionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTimeRecievedNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TimeRecievedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTimeRecievedNull() {
                this[this.tableNonTemplatedLabPreparations.TimeRecievedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTimeOfProductionNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TimeOfProductionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTimeOfProductionNull() {
                this[this.tableNonTemplatedLabPreparations.TimeOfProductionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsModeOfProductionNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ModeOfProductionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetModeOfProductionNull() {
                this[this.tableNonTemplatedLabPreparations.ModeOfProductionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsViscosityNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ViscosityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetViscosityNull() {
                this[this.tableNonTemplatedLabPreparations.ViscosityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTimeExaminedNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TimeExaminedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTimeExaminedNull() {
                this[this.tableNonTemplatedLabPreparations.TimeExaminedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMorphologyNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MorphologyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMorphologyNull() {
                this[this.tableNonTemplatedLabPreparations.MorphologyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMotilityNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MotilityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMotilityNull() {
                this[this.tableNonTemplatedLabPreparations.MotilityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTotalSpermCountNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TotalSpermCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTotalSpermCountNull() {
                this[this.tableNonTemplatedLabPreparations.TotalSpermCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsImmatureCellsNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ImmatureCellsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetImmatureCellsNull() {
                this[this.tableNonTemplatedLabPreparations.ImmatureCellsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsWBCSNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.WBCSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetWBCSNull() {
                this[this.tableNonTemplatedLabPreparations.WBCSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsAnySpillageNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.AnySpillageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetAnySpillageNull() {
                this[this.tableNonTemplatedLabPreparations.AnySpillageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsRBCSNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.RBCSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetRBCSNull() {
                this[this.tableNonTemplatedLabPreparations.RBCSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsPHNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.PHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetPHNull() {
                this[this.tableNonTemplatedLabPreparations.PHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsKOHPrepareationNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.KOHPrepareationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetKOHPrepareationNull() {
                this[this.tableNonTemplatedLabPreparations.KOHPrepareationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsKOHResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.KOHResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetKOHResultNull() {
                this[this.tableNonTemplatedLabPreparations.KOHResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsOtherStainResultNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.OtherStainResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetOtherStainResultNull() {
                this[this.tableNonTemplatedLabPreparations.OtherStainResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsServiceDepartmentNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.ServiceDepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetServiceDepartmentNull() {
                this[this.tableNonTemplatedLabPreparations.ServiceDepartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsTemplateNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.TemplateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetTemplateNull() {
                this[this.tableNonTemplatedLabPreparations.TemplateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsStainTypeeNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.StainTypeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetStainTypeeNull() {
                this[this.tableNonTemplatedLabPreparations.StainTypeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsMicroscopyTypeeNull() {
                return this.IsNull(this.tableNonTemplatedLabPreparations.MicroscopyTypeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetMicroscopyTypeeNull() {
                this[this.tableNonTemplatedLabPreparations.MicroscopyTypeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class NonTemplatedLabPreparationsRowChangeEvent : global::System.EventArgs {
            
            private NonTemplatedLabPreparationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRowChangeEvent(NonTemplatedLabPreparationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public NonTemplatedLabPreparationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace JenzHealth.NonTemplatedLabResultDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NonTemplatedLabPreparationsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public NonTemplatedLabPreparationsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NonTemplatedLabPreparations";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("BillInvoiceNumber", "BillInvoiceNumber");
            tableMapping.ColumnMappings.Add("Appearance", "Appearance");
            tableMapping.ColumnMappings.Add("Color", "Color");
            tableMapping.ColumnMappings.Add("MacrosopyBlood", "MacrosopyBlood");
            tableMapping.ColumnMappings.Add("AdultWarm", "AdultWarm");
            tableMapping.ColumnMappings.Add("Mucus", "Mucus");
            tableMapping.ColumnMappings.Add("SpecificGravity", "SpecificGravity");
            tableMapping.ColumnMappings.Add("Acidity", "Acidity");
            tableMapping.ColumnMappings.Add("Glucose", "Glucose");
            tableMapping.ColumnMappings.Add("Protein", "Protein");
            tableMapping.ColumnMappings.Add("Niterite", "Niterite");
            tableMapping.ColumnMappings.Add("Ketones", "Ketones");
            tableMapping.ColumnMappings.Add("Blirubin", "Blirubin");
            tableMapping.ColumnMappings.Add("Urobilinogen", "Urobilinogen");
            tableMapping.ColumnMappings.Add("AscorbicAcid", "AscorbicAcid");
            tableMapping.ColumnMappings.Add("DipstickBlood", "DipstickBlood");
            tableMapping.ColumnMappings.Add("LeucocyteEsterase", "LeucocyteEsterase");
            tableMapping.ColumnMappings.Add("Temperature", "Temperature");
            tableMapping.ColumnMappings.Add("Duration", "Duration");
            tableMapping.ColumnMappings.Add("Atomsphere", "Atomsphere");
            tableMapping.ColumnMappings.Add("Plate", "Plate");
            tableMapping.ColumnMappings.Add("Incubatio", "Incubatio");
            tableMapping.ColumnMappings.Add("Labnote", "Labnote");
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted");
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated");
            tableMapping.ColumnMappings.Add("MicroscopyType", "MicroscopyType");
            tableMapping.ColumnMappings.Add("StainType", "StainType");
            tableMapping.ColumnMappings.Add("PusCells", "PusCells");
            tableMapping.ColumnMappings.Add("WhiteBloodCells", "WhiteBloodCells");
            tableMapping.ColumnMappings.Add("RedBloodCells", "RedBloodCells");
            tableMapping.ColumnMappings.Add("WetMountBacteria", "WetMountBacteria");
            tableMapping.ColumnMappings.Add("WetMountYesats", "WetMountYesats");
            tableMapping.ColumnMappings.Add("Casts", "Casts");
            tableMapping.ColumnMappings.Add("Cystals", "Cystals");
            tableMapping.ColumnMappings.Add("Ova", "Ova");
            tableMapping.ColumnMappings.Add("WetMountParasite", "WetMountParasite");
            tableMapping.ColumnMappings.Add("EpithelialCells", "EpithelialCells");
            tableMapping.ColumnMappings.Add("Protozoa", "Protozoa");
            tableMapping.ColumnMappings.Add("WetMountOthers", "WetMountOthers");
            tableMapping.ColumnMappings.Add("GramPositiveCocci", "GramPositiveCocci");
            tableMapping.ColumnMappings.Add("GramPositiveRods", "GramPositiveRods");
            tableMapping.ColumnMappings.Add("TrichomonasVaginalis", "TrichomonasVaginalis");
            tableMapping.ColumnMappings.Add("YeastCells", "YeastCells");
            tableMapping.ColumnMappings.Add("GramNegativeCocci", "GramNegativeCocci");
            tableMapping.ColumnMappings.Add("GramNegativeRods", "GramNegativeRods");
            tableMapping.ColumnMappings.Add("VincetsOrganisms", "VincetsOrganisms");
            tableMapping.ColumnMappings.Add("GiemsaStainParasite", "GiemsaStainParasite");
            tableMapping.ColumnMappings.Add("GiemsaOthers", "GiemsaOthers");
            tableMapping.ColumnMappings.Add("AcisFastBacilli", "AcisFastBacilli");
            tableMapping.ColumnMappings.Add("ZiehlOthers", "ZiehlOthers");
            tableMapping.ColumnMappings.Add("IndiaInkResult", "IndiaInkResult");
            tableMapping.ColumnMappings.Add("IodineResult", "IodineResult");
            tableMapping.ColumnMappings.Add("MethyleneResult", "MethyleneResult");
            tableMapping.ColumnMappings.Add("OthersResult", "OthersResult");
            tableMapping.ColumnMappings.Add("DurationOfAbstinence", "DurationOfAbstinence");
            tableMapping.ColumnMappings.Add("DateOfProduction", "DateOfProduction");
            tableMapping.ColumnMappings.Add("TimeRecieved", "TimeRecieved");
            tableMapping.ColumnMappings.Add("TimeOfProduction", "TimeOfProduction");
            tableMapping.ColumnMappings.Add("ModeOfProduction", "ModeOfProduction");
            tableMapping.ColumnMappings.Add("Viscosity", "Viscosity");
            tableMapping.ColumnMappings.Add("TimeExamined", "TimeExamined");
            tableMapping.ColumnMappings.Add("Morphology", "Morphology");
            tableMapping.ColumnMappings.Add("Motility", "Motility");
            tableMapping.ColumnMappings.Add("TotalSpermCount", "TotalSpermCount");
            tableMapping.ColumnMappings.Add("ImmatureCells", "ImmatureCells");
            tableMapping.ColumnMappings.Add("WBCS", "WBCS");
            tableMapping.ColumnMappings.Add("AnySpillage", "AnySpillage");
            tableMapping.ColumnMappings.Add("RBCS", "RBCS");
            tableMapping.ColumnMappings.Add("PH", "PH");
            tableMapping.ColumnMappings.Add("KOHPrepareation", "KOHPrepareation");
            tableMapping.ColumnMappings.Add("KOHResult", "KOHResult");
            tableMapping.ColumnMappings.Add("OtherStainResult", "OtherStainResult");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[NonTemplatedLabPreparations] WHERE (([Id] = @Original_Id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[NonTemplatedLabPreparations] ([BillInvoiceNumber], [Appearance" +
                "], [Color], [MacrosopyBlood], [AdultWarm], [Mucus], [SpecificGravity], [Acidity]" +
                ", [Glucose], [Protein], [Niterite], [Ketones], [Blirubin], [Urobilinogen], [Asco" +
                "rbicAcid], [DipstickBlood], [LeucocyteEsterase], [Temperature], [Duration], [Ato" +
                "msphere], [Plate], [Incubatio], [Labnote], [IsDeleted], [DateCreated], [Microsco" +
                "pyType], [StainType], [PusCells], [WhiteBloodCells], [RedBloodCells], [WetMountB" +
                "acteria], [WetMountYesats], [Casts], [Cystals], [Ova], [WetMountParasite], [Epit" +
                "helialCells], [Protozoa], [WetMountOthers], [GramPositiveCocci], [GramPositiveRo" +
                "ds], [TrichomonasVaginalis], [YeastCells], [GramNegativeCocci], [GramNegativeRod" +
                "s], [VincetsOrganisms], [GiemsaStainParasite], [GiemsaOthers], [AcisFastBacilli]" +
                ", [ZiehlOthers], [IndiaInkResult], [IodineResult], [MethyleneResult], [OthersRes" +
                "ult], [DurationOfAbstinence], [DateOfProduction], [TimeRecieved], [TimeOfProduct" +
                "ion], [ModeOfProduction], [Viscosity], [TimeExamined], [Morphology], [Motility]," +
                " [TotalSpermCount], [ImmatureCells], [WBCS], [AnySpillage], [RBCS], [PH], [KOHPr" +
                "epareation], [KOHResult], [OtherStainResult]) VALUES (@BillInvoiceNumber, @Appea" +
                "rance, @Color, @MacrosopyBlood, @AdultWarm, @Mucus, @SpecificGravity, @Acidity, " +
                "@Glucose, @Protein, @Niterite, @Ketones, @Blirubin, @Urobilinogen, @AscorbicAcid" +
                ", @DipstickBlood, @LeucocyteEsterase, @Temperature, @Duration, @Atomsphere, @Pla" +
                "te, @Incubatio, @Labnote, @IsDeleted, @DateCreated, @MicroscopyType, @StainType," +
                " @PusCells, @WhiteBloodCells, @RedBloodCells, @WetMountBacteria, @WetMountYesats" +
                ", @Casts, @Cystals, @Ova, @WetMountParasite, @EpithelialCells, @Protozoa, @WetMo" +
                "untOthers, @GramPositiveCocci, @GramPositiveRods, @TrichomonasVaginalis, @YeastC" +
                "ells, @GramNegativeCocci, @GramNegativeRods, @VincetsOrganisms, @GiemsaStainPara" +
                "site, @GiemsaOthers, @AcisFastBacilli, @ZiehlOthers, @IndiaInkResult, @IodineRes" +
                "ult, @MethyleneResult, @OthersResult, @DurationOfAbstinence, @DateOfProduction, " +
                "@TimeRecieved, @TimeOfProduction, @ModeOfProduction, @Viscosity, @TimeExamined, " +
                "@Morphology, @Motility, @TotalSpermCount, @ImmatureCells, @WBCS, @AnySpillage, @" +
                "RBCS, @PH, @KOHPrepareation, @KOHResult, @OtherStainResult)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillInvoiceNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BillInvoiceNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Appearance", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Appearance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Color", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MacrosopyBlood", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MacrosopyBlood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdultWarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdultWarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mucus", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mucus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecificGravity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecificGravity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acidity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acidity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Glucose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Glucose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Protein", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Protein", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Niterite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Niterite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ketones", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ketones", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Blirubin", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Blirubin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Urobilinogen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Urobilinogen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AscorbicAcid", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AscorbicAcid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DipstickBlood", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DipstickBlood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeucocyteEsterase", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeucocyteEsterase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temperature", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temperature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Atomsphere", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Atomsphere", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Plate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Plate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Incubatio", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Incubatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Labnote", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Labnote", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDeleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MicroscopyType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MicroscopyType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StainType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StainType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PusCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PusCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WhiteBloodCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WhiteBloodCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RedBloodCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RedBloodCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountBacteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountBacteria", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountYesats", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountYesats", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Casts", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Casts", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cystals", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cystals", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ova", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ova", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountParasite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountParasite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EpithelialCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EpithelialCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Protozoa", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Protozoa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramPositiveCocci", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramPositiveCocci", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramPositiveRods", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramPositiveRods", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrichomonasVaginalis", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrichomonasVaginalis", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YeastCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YeastCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramNegativeCocci", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramNegativeCocci", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramNegativeRods", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramNegativeRods", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VincetsOrganisms", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VincetsOrganisms", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GiemsaStainParasite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GiemsaStainParasite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GiemsaOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GiemsaOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcisFastBacilli", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcisFastBacilli", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZiehlOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZiehlOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IndiaInkResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IndiaInkResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IodineResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IodineResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MethyleneResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MethyleneResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OthersResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OthersResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DurationOfAbstinence", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DurationOfAbstinence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfProduction", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeRecieved", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeRecieved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeOfProduction", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModeOfProduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModeOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Viscosity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Viscosity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeExamined", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeExamined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Morphology", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Morphology", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Motility", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Motility", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSpermCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSpermCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImmatureCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImmatureCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBCS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBCS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AnySpillage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AnySpillage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RBCS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RBCS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PH", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KOHPrepareation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KOHPrepareation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KOHResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KOHResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherStainResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherStainResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[NonTemplatedLabPreparations] SET [BillInvoiceNumber] = @BillInvoice" +
                "Number, [Appearance] = @Appearance, [Color] = @Color, [MacrosopyBlood] = @Macros" +
                "opyBlood, [AdultWarm] = @AdultWarm, [Mucus] = @Mucus, [SpecificGravity] = @Speci" +
                "ficGravity, [Acidity] = @Acidity, [Glucose] = @Glucose, [Protein] = @Protein, [N" +
                "iterite] = @Niterite, [Ketones] = @Ketones, [Blirubin] = @Blirubin, [Urobilinoge" +
                "n] = @Urobilinogen, [AscorbicAcid] = @AscorbicAcid, [DipstickBlood] = @DipstickB" +
                "lood, [LeucocyteEsterase] = @LeucocyteEsterase, [Temperature] = @Temperature, [D" +
                "uration] = @Duration, [Atomsphere] = @Atomsphere, [Plate] = @Plate, [Incubatio] " +
                "= @Incubatio, [Labnote] = @Labnote, [IsDeleted] = @IsDeleted, [DateCreated] = @D" +
                "ateCreated, [MicroscopyType] = @MicroscopyType, [StainType] = @StainType, [PusCe" +
                "lls] = @PusCells, [WhiteBloodCells] = @WhiteBloodCells, [RedBloodCells] = @RedBl" +
                "oodCells, [WetMountBacteria] = @WetMountBacteria, [WetMountYesats] = @WetMountYe" +
                "sats, [Casts] = @Casts, [Cystals] = @Cystals, [Ova] = @Ova, [WetMountParasite] =" +
                " @WetMountParasite, [EpithelialCells] = @EpithelialCells, [Protozoa] = @Protozoa" +
                ", [WetMountOthers] = @WetMountOthers, [GramPositiveCocci] = @GramPositiveCocci, " +
                "[GramPositiveRods] = @GramPositiveRods, [TrichomonasVaginalis] = @TrichomonasVag" +
                "inalis, [YeastCells] = @YeastCells, [GramNegativeCocci] = @GramNegativeCocci, [G" +
                "ramNegativeRods] = @GramNegativeRods, [VincetsOrganisms] = @VincetsOrganisms, [G" +
                "iemsaStainParasite] = @GiemsaStainParasite, [GiemsaOthers] = @GiemsaOthers, [Aci" +
                "sFastBacilli] = @AcisFastBacilli, [ZiehlOthers] = @ZiehlOthers, [IndiaInkResult]" +
                " = @IndiaInkResult, [IodineResult] = @IodineResult, [MethyleneResult] = @Methyle" +
                "neResult, [OthersResult] = @OthersResult, [DurationOfAbstinence] = @DurationOfAb" +
                "stinence, [DateOfProduction] = @DateOfProduction, [TimeRecieved] = @TimeRecieved" +
                ", [TimeOfProduction] = @TimeOfProduction, [ModeOfProduction] = @ModeOfProduction" +
                ", [Viscosity] = @Viscosity, [TimeExamined] = @TimeExamined, [Morphology] = @Morp" +
                "hology, [Motility] = @Motility, [TotalSpermCount] = @TotalSpermCount, [ImmatureC" +
                "ells] = @ImmatureCells, [WBCS] = @WBCS, [AnySpillage] = @AnySpillage, [RBCS] = @" +
                "RBCS, [PH] = @PH, [KOHPrepareation] = @KOHPrepareation, [KOHResult] = @KOHResult" +
                ", [OtherStainResult] = @OtherStainResult WHERE (([Id] = @Original_Id))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillInvoiceNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BillInvoiceNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Appearance", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Appearance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Color", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MacrosopyBlood", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MacrosopyBlood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdultWarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdultWarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mucus", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mucus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecificGravity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecificGravity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Acidity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Acidity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Glucose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Glucose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Protein", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Protein", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Niterite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Niterite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ketones", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ketones", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Blirubin", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Blirubin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Urobilinogen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Urobilinogen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AscorbicAcid", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AscorbicAcid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DipstickBlood", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DipstickBlood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeucocyteEsterase", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeucocyteEsterase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temperature", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temperature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Duration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Atomsphere", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Atomsphere", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Plate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Plate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Incubatio", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Incubatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Labnote", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Labnote", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDeleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateCreated", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateCreated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MicroscopyType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MicroscopyType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StainType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StainType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PusCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PusCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WhiteBloodCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WhiteBloodCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RedBloodCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RedBloodCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountBacteria", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountBacteria", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountYesats", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountYesats", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Casts", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Casts", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cystals", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cystals", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ova", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ova", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountParasite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountParasite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EpithelialCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EpithelialCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Protozoa", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Protozoa", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WetMountOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WetMountOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramPositiveCocci", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramPositiveCocci", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramPositiveRods", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramPositiveRods", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrichomonasVaginalis", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrichomonasVaginalis", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YeastCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YeastCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramNegativeCocci", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramNegativeCocci", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GramNegativeRods", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GramNegativeRods", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VincetsOrganisms", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VincetsOrganisms", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GiemsaStainParasite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GiemsaStainParasite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GiemsaOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GiemsaOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcisFastBacilli", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcisFastBacilli", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZiehlOthers", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZiehlOthers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IndiaInkResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IndiaInkResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IodineResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IodineResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MethyleneResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MethyleneResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OthersResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OthersResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DurationOfAbstinence", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DurationOfAbstinence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfProduction", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeRecieved", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeRecieved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeOfProduction", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModeOfProduction", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModeOfProduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Viscosity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Viscosity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeExamined", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeExamined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Morphology", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Morphology", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Motility", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Motility", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSpermCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSpermCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImmatureCells", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImmatureCells", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBCS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBCS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AnySpillage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AnySpillage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RBCS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RBCS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PH", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KOHPrepareation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KOHPrepareation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KOHResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KOHResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherStainResult", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OtherStainResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseEntities"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Id, BillInvoiceNumber, Appearance, Color, MacrosopyBlood, AdultWarm, Mucus, SpecificGravity, Acidity, Glucose, Protein, Niterite, Ketones, Blirubin, Urobilinogen, AscorbicAcid, DipstickBlood, LeucocyteEsterase, Temperature, Duration, Atomsphere, Plate, Incubatio, Labnote, IsDeleted, DateCreated, MicroscopyType, StainType, PusCells, WhiteBloodCells, RedBloodCells, WetMountBacteria, WetMountYesats, Casts, Cystals, Ova, WetMountParasite, EpithelialCells, Protozoa, WetMountOthers, GramPositiveCocci, GramPositiveRods, TrichomonasVaginalis, YeastCells, GramNegativeCocci, GramNegativeRods, VincetsOrganisms, GiemsaStainParasite, GiemsaOthers, AcisFastBacilli, ZiehlOthers, IndiaInkResult, IodineResult, MethyleneResult, OthersResult, DurationOfAbstinence, DateOfProduction, TimeRecieved, TimeOfProduction, ModeOfProduction, Viscosity, TimeExamined, Morphology, Motility, TotalSpermCount, ImmatureCells, WBCS, AnySpillage, RBCS, PH, KOHPrepareation, KOHResult, OtherStainResult FROM dbo.NonTemplatedLabPreparations";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NonTemplatedLabResultDataSet.NonTemplatedLabPreparationsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NonTemplatedLabResultDataSet.NonTemplatedLabPreparationsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NonTemplatedLabResultDataSet.NonTemplatedLabPreparationsDataTable dataTable = new NonTemplatedLabResultDataSet.NonTemplatedLabPreparationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NonTemplatedLabResultDataSet.NonTemplatedLabPreparationsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NonTemplatedLabResultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NonTemplatedLabPreparations");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string BillInvoiceNumber, 
                    string Appearance, 
                    string Color, 
                    string MacrosopyBlood, 
                    string AdultWarm, 
                    string Mucus, 
                    string SpecificGravity, 
                    string Acidity, 
                    string Glucose, 
                    string Protein, 
                    string Niterite, 
                    string Ketones, 
                    string Blirubin, 
                    string Urobilinogen, 
                    string AscorbicAcid, 
                    string DipstickBlood, 
                    string LeucocyteEsterase, 
                    string Temperature, 
                    string Duration, 
                    string Atomsphere, 
                    string Plate, 
                    string Incubatio, 
                    string Labnote, 
                    bool IsDeleted, 
                    System.DateTime DateCreated, 
                    int MicroscopyType, 
                    int StainType, 
                    string PusCells, 
                    string WhiteBloodCells, 
                    string RedBloodCells, 
                    string WetMountBacteria, 
                    string WetMountYesats, 
                    string Casts, 
                    string Cystals, 
                    string Ova, 
                    string WetMountParasite, 
                    string EpithelialCells, 
                    string Protozoa, 
                    string WetMountOthers, 
                    string GramPositiveCocci, 
                    string GramPositiveRods, 
                    string TrichomonasVaginalis, 
                    string YeastCells, 
                    string GramNegativeCocci, 
                    string GramNegativeRods, 
                    string VincetsOrganisms, 
                    string GiemsaStainParasite, 
                    string GiemsaOthers, 
                    string AcisFastBacilli, 
                    string ZiehlOthers, 
                    string IndiaInkResult, 
                    string IodineResult, 
                    string MethyleneResult, 
                    string OthersResult, 
                    string DurationOfAbstinence, 
                    global::System.Nullable<global::System.DateTime> DateOfProduction, 
                    global::System.Nullable<global::System.DateTime> TimeRecieved, 
                    global::System.Nullable<global::System.DateTime> TimeOfProduction, 
                    string ModeOfProduction, 
                    string Viscosity, 
                    global::System.Nullable<global::System.DateTime> TimeExamined, 
                    string Morphology, 
                    string Motility, 
                    global::System.Nullable<int> TotalSpermCount, 
                    string ImmatureCells, 
                    string WBCS, 
                    string AnySpillage, 
                    string RBCS, 
                    string PH, 
                    string KOHPrepareation, 
                    string KOHResult, 
                    string OtherStainResult) {
            if ((BillInvoiceNumber == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BillInvoiceNumber));
            }
            if ((Appearance == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Appearance));
            }
            if ((Color == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Color));
            }
            if ((MacrosopyBlood == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MacrosopyBlood));
            }
            if ((AdultWarm == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AdultWarm));
            }
            if ((Mucus == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Mucus));
            }
            if ((SpecificGravity == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SpecificGravity));
            }
            if ((Acidity == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Acidity));
            }
            if ((Glucose == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Glucose));
            }
            if ((Protein == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Protein));
            }
            if ((Niterite == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Niterite));
            }
            if ((Ketones == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Ketones));
            }
            if ((Blirubin == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Blirubin));
            }
            if ((Urobilinogen == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Urobilinogen));
            }
            if ((AscorbicAcid == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(AscorbicAcid));
            }
            if ((DipstickBlood == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(DipstickBlood));
            }
            if ((LeucocyteEsterase == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(LeucocyteEsterase));
            }
            if ((Temperature == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Temperature));
            }
            if ((Duration == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Duration));
            }
            if ((Atomsphere == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Atomsphere));
            }
            if ((Plate == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Plate));
            }
            if ((Incubatio == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Incubatio));
            }
            if ((Labnote == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Labnote));
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(IsDeleted));
            this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(DateCreated));
            this.Adapter.InsertCommand.Parameters[25].Value = ((int)(MicroscopyType));
            this.Adapter.InsertCommand.Parameters[26].Value = ((int)(StainType));
            if ((PusCells == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(PusCells));
            }
            if ((WhiteBloodCells == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(WhiteBloodCells));
            }
            if ((RedBloodCells == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(RedBloodCells));
            }
            if ((WetMountBacteria == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(WetMountBacteria));
            }
            if ((WetMountYesats == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(WetMountYesats));
            }
            if ((Casts == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(Casts));
            }
            if ((Cystals == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(Cystals));
            }
            if ((Ova == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(Ova));
            }
            if ((WetMountParasite == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(WetMountParasite));
            }
            if ((EpithelialCells == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(EpithelialCells));
            }
            if ((Protozoa == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(Protozoa));
            }
            if ((WetMountOthers == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(WetMountOthers));
            }
            if ((GramPositiveCocci == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(GramPositiveCocci));
            }
            if ((GramPositiveRods == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(GramPositiveRods));
            }
            if ((TrichomonasVaginalis == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(TrichomonasVaginalis));
            }
            if ((YeastCells == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(YeastCells));
            }
            if ((GramNegativeCocci == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(GramNegativeCocci));
            }
            if ((GramNegativeRods == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(GramNegativeRods));
            }
            if ((VincetsOrganisms == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(VincetsOrganisms));
            }
            if ((GiemsaStainParasite == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(GiemsaStainParasite));
            }
            if ((GiemsaOthers == null)) {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = ((string)(GiemsaOthers));
            }
            if ((AcisFastBacilli == null)) {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(AcisFastBacilli));
            }
            if ((ZiehlOthers == null)) {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(ZiehlOthers));
            }
            if ((IndiaInkResult == null)) {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = ((string)(IndiaInkResult));
            }
            if ((IodineResult == null)) {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = ((string)(IodineResult));
            }
            if ((MethyleneResult == null)) {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = ((string)(MethyleneResult));
            }
            if ((OthersResult == null)) {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = ((string)(OthersResult));
            }
            if ((DurationOfAbstinence == null)) {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = ((string)(DurationOfAbstinence));
            }
            if ((DateOfProduction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((System.DateTime)(DateOfProduction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((TimeRecieved.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((System.DateTime)(TimeRecieved.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((TimeOfProduction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((System.DateTime)(TimeOfProduction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((ModeOfProduction == null)) {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = ((string)(ModeOfProduction));
            }
            if ((Viscosity == null)) {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = ((string)(Viscosity));
            }
            if ((TimeExamined.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((System.DateTime)(TimeExamined.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Morphology == null)) {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = ((string)(Morphology));
            }
            if ((Motility == null)) {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = ((string)(Motility));
            }
            if ((TotalSpermCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[63].Value = ((int)(TotalSpermCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((ImmatureCells == null)) {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = ((string)(ImmatureCells));
            }
            if ((WBCS == null)) {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = ((string)(WBCS));
            }
            if ((AnySpillage == null)) {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[66].Value = ((string)(AnySpillage));
            }
            if ((RBCS == null)) {
                this.Adapter.InsertCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[67].Value = ((string)(RBCS));
            }
            if ((PH == null)) {
                this.Adapter.InsertCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[68].Value = ((string)(PH));
            }
            if ((KOHPrepareation == null)) {
                this.Adapter.InsertCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[69].Value = ((string)(KOHPrepareation));
            }
            if ((KOHResult == null)) {
                this.Adapter.InsertCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[70].Value = ((string)(KOHResult));
            }
            if ((OtherStainResult == null)) {
                this.Adapter.InsertCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[71].Value = ((string)(OtherStainResult));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string BillInvoiceNumber, 
                    string Appearance, 
                    string Color, 
                    string MacrosopyBlood, 
                    string AdultWarm, 
                    string Mucus, 
                    string SpecificGravity, 
                    string Acidity, 
                    string Glucose, 
                    string Protein, 
                    string Niterite, 
                    string Ketones, 
                    string Blirubin, 
                    string Urobilinogen, 
                    string AscorbicAcid, 
                    string DipstickBlood, 
                    string LeucocyteEsterase, 
                    string Temperature, 
                    string Duration, 
                    string Atomsphere, 
                    string Plate, 
                    string Incubatio, 
                    string Labnote, 
                    bool IsDeleted, 
                    System.DateTime DateCreated, 
                    int MicroscopyType, 
                    int StainType, 
                    string PusCells, 
                    string WhiteBloodCells, 
                    string RedBloodCells, 
                    string WetMountBacteria, 
                    string WetMountYesats, 
                    string Casts, 
                    string Cystals, 
                    string Ova, 
                    string WetMountParasite, 
                    string EpithelialCells, 
                    string Protozoa, 
                    string WetMountOthers, 
                    string GramPositiveCocci, 
                    string GramPositiveRods, 
                    string TrichomonasVaginalis, 
                    string YeastCells, 
                    string GramNegativeCocci, 
                    string GramNegativeRods, 
                    string VincetsOrganisms, 
                    string GiemsaStainParasite, 
                    string GiemsaOthers, 
                    string AcisFastBacilli, 
                    string ZiehlOthers, 
                    string IndiaInkResult, 
                    string IodineResult, 
                    string MethyleneResult, 
                    string OthersResult, 
                    string DurationOfAbstinence, 
                    global::System.Nullable<global::System.DateTime> DateOfProduction, 
                    global::System.Nullable<global::System.DateTime> TimeRecieved, 
                    global::System.Nullable<global::System.DateTime> TimeOfProduction, 
                    string ModeOfProduction, 
                    string Viscosity, 
                    global::System.Nullable<global::System.DateTime> TimeExamined, 
                    string Morphology, 
                    string Motility, 
                    global::System.Nullable<int> TotalSpermCount, 
                    string ImmatureCells, 
                    string WBCS, 
                    string AnySpillage, 
                    string RBCS, 
                    string PH, 
                    string KOHPrepareation, 
                    string KOHResult, 
                    string OtherStainResult, 
                    int Original_Id) {
            if ((BillInvoiceNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BillInvoiceNumber));
            }
            if ((Appearance == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Appearance));
            }
            if ((Color == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Color));
            }
            if ((MacrosopyBlood == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MacrosopyBlood));
            }
            if ((AdultWarm == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AdultWarm));
            }
            if ((Mucus == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Mucus));
            }
            if ((SpecificGravity == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SpecificGravity));
            }
            if ((Acidity == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Acidity));
            }
            if ((Glucose == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Glucose));
            }
            if ((Protein == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Protein));
            }
            if ((Niterite == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Niterite));
            }
            if ((Ketones == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Ketones));
            }
            if ((Blirubin == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Blirubin));
            }
            if ((Urobilinogen == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Urobilinogen));
            }
            if ((AscorbicAcid == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(AscorbicAcid));
            }
            if ((DipstickBlood == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(DipstickBlood));
            }
            if ((LeucocyteEsterase == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(LeucocyteEsterase));
            }
            if ((Temperature == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Temperature));
            }
            if ((Duration == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Duration));
            }
            if ((Atomsphere == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Atomsphere));
            }
            if ((Plate == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Plate));
            }
            if ((Incubatio == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Incubatio));
            }
            if ((Labnote == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Labnote));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(IsDeleted));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(DateCreated));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(MicroscopyType));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(StainType));
            if ((PusCells == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(PusCells));
            }
            if ((WhiteBloodCells == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(WhiteBloodCells));
            }
            if ((RedBloodCells == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(RedBloodCells));
            }
            if ((WetMountBacteria == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(WetMountBacteria));
            }
            if ((WetMountYesats == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(WetMountYesats));
            }
            if ((Casts == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Casts));
            }
            if ((Cystals == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Cystals));
            }
            if ((Ova == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Ova));
            }
            if ((WetMountParasite == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(WetMountParasite));
            }
            if ((EpithelialCells == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(EpithelialCells));
            }
            if ((Protozoa == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Protozoa));
            }
            if ((WetMountOthers == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(WetMountOthers));
            }
            if ((GramPositiveCocci == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(GramPositiveCocci));
            }
            if ((GramPositiveRods == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(GramPositiveRods));
            }
            if ((TrichomonasVaginalis == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(TrichomonasVaginalis));
            }
            if ((YeastCells == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(YeastCells));
            }
            if ((GramNegativeCocci == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(GramNegativeCocci));
            }
            if ((GramNegativeRods == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(GramNegativeRods));
            }
            if ((VincetsOrganisms == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(VincetsOrganisms));
            }
            if ((GiemsaStainParasite == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(GiemsaStainParasite));
            }
            if ((GiemsaOthers == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(GiemsaOthers));
            }
            if ((AcisFastBacilli == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(AcisFastBacilli));
            }
            if ((ZiehlOthers == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(ZiehlOthers));
            }
            if ((IndiaInkResult == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(IndiaInkResult));
            }
            if ((IodineResult == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(IodineResult));
            }
            if ((MethyleneResult == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(MethyleneResult));
            }
            if ((OthersResult == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(OthersResult));
            }
            if ((DurationOfAbstinence == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(DurationOfAbstinence));
            }
            if ((DateOfProduction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((System.DateTime)(DateOfProduction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((TimeRecieved.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((System.DateTime)(TimeRecieved.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((TimeOfProduction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((System.DateTime)(TimeOfProduction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((ModeOfProduction == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(ModeOfProduction));
            }
            if ((Viscosity == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Viscosity));
            }
            if ((TimeExamined.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((System.DateTime)(TimeExamined.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Morphology == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Morphology));
            }
            if ((Motility == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Motility));
            }
            if ((TotalSpermCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(TotalSpermCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((ImmatureCells == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(ImmatureCells));
            }
            if ((WBCS == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(WBCS));
            }
            if ((AnySpillage == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(AnySpillage));
            }
            if ((RBCS == null)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(RBCS));
            }
            if ((PH == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((string)(PH));
            }
            if ((KOHPrepareation == null)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(KOHPrepareation));
            }
            if ((KOHResult == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((string)(KOHResult));
            }
            if ((OtherStainResult == null)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(OtherStainResult));
            }
            this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private NonTemplatedLabPreparationsTableAdapter _nonTemplatedLabPreparationsTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NonTemplatedLabPreparationsTableAdapter NonTemplatedLabPreparationsTableAdapter {
            get {
                return this._nonTemplatedLabPreparationsTableAdapter;
            }
            set {
                this._nonTemplatedLabPreparationsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._nonTemplatedLabPreparationsTableAdapter != null) 
                            && (this._nonTemplatedLabPreparationsTableAdapter.Connection != null))) {
                    return this._nonTemplatedLabPreparationsTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(NonTemplatedLabResultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.NonTemplatedLabPreparations.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._nonTemplatedLabPreparationsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(NonTemplatedLabResultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.NonTemplatedLabPreparations.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._nonTemplatedLabPreparationsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(NonTemplatedLabResultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.NonTemplatedLabPreparations.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._nonTemplatedLabPreparationsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(NonTemplatedLabResultDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._nonTemplatedLabPreparationsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._nonTemplatedLabPreparationsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                    revertConnections.Add(this._nonTemplatedLabPreparationsTableAdapter, this._nonTemplatedLabPreparationsTableAdapter.Connection);
                    this._nonTemplatedLabPreparationsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._nonTemplatedLabPreparationsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._nonTemplatedLabPreparationsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._nonTemplatedLabPreparationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._nonTemplatedLabPreparationsTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._nonTemplatedLabPreparationsTableAdapter != null)) {
                    this._nonTemplatedLabPreparationsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._nonTemplatedLabPreparationsTableAdapter]));
                    this._nonTemplatedLabPreparationsTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591